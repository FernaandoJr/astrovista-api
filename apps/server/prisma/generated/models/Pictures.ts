
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Pictures` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Pictures
 * 
 */
export type PicturesModel = runtime.Types.Result.DefaultSelection<Prisma.$PicturesPayload>

export type AggregatePictures = {
  _count: PicturesCountAggregateOutputType | null
  _min: PicturesMinAggregateOutputType | null
  _max: PicturesMaxAggregateOutputType | null
}

export type PicturesMinAggregateOutputType = {
  id: string | null
  date: string | null
  explanation: string | null
  hdurl: string | null
  media_type: string | null
  service_version: string | null
  title: string | null
  url: string | null
  copyright: string | null
}

export type PicturesMaxAggregateOutputType = {
  id: string | null
  date: string | null
  explanation: string | null
  hdurl: string | null
  media_type: string | null
  service_version: string | null
  title: string | null
  url: string | null
  copyright: string | null
}

export type PicturesCountAggregateOutputType = {
  id: number
  date: number
  explanation: number
  hdurl: number
  media_type: number
  service_version: number
  title: number
  url: number
  copyright: number
  _all: number
}


export type PicturesMinAggregateInputType = {
  id?: true
  date?: true
  explanation?: true
  hdurl?: true
  media_type?: true
  service_version?: true
  title?: true
  url?: true
  copyright?: true
}

export type PicturesMaxAggregateInputType = {
  id?: true
  date?: true
  explanation?: true
  hdurl?: true
  media_type?: true
  service_version?: true
  title?: true
  url?: true
  copyright?: true
}

export type PicturesCountAggregateInputType = {
  id?: true
  date?: true
  explanation?: true
  hdurl?: true
  media_type?: true
  service_version?: true
  title?: true
  url?: true
  copyright?: true
  _all?: true
}

export type PicturesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Pictures to aggregate.
   */
  where?: Prisma.PicturesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pictures to fetch.
   */
  orderBy?: Prisma.PicturesOrderByWithRelationInput | Prisma.PicturesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PicturesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pictures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pictures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Pictures
  **/
  _count?: true | PicturesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PicturesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PicturesMaxAggregateInputType
}

export type GetPicturesAggregateType<T extends PicturesAggregateArgs> = {
      [P in keyof T & keyof AggregatePictures]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePictures[P]>
    : Prisma.GetScalarType<T[P], AggregatePictures[P]>
}




export type PicturesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PicturesWhereInput
  orderBy?: Prisma.PicturesOrderByWithAggregationInput | Prisma.PicturesOrderByWithAggregationInput[]
  by: Prisma.PicturesScalarFieldEnum[] | Prisma.PicturesScalarFieldEnum
  having?: Prisma.PicturesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PicturesCountAggregateInputType | true
  _min?: PicturesMinAggregateInputType
  _max?: PicturesMaxAggregateInputType
}

export type PicturesGroupByOutputType = {
  id: string
  date: string
  explanation: string
  hdurl: string | null
  media_type: string
  service_version: string
  title: string
  url: string | null
  copyright: string | null
  _count: PicturesCountAggregateOutputType | null
  _min: PicturesMinAggregateOutputType | null
  _max: PicturesMaxAggregateOutputType | null
}

type GetPicturesGroupByPayload<T extends PicturesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PicturesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PicturesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PicturesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PicturesGroupByOutputType[P]>
      }
    >
  > 



export type PicturesWhereInput = {
  AND?: Prisma.PicturesWhereInput | Prisma.PicturesWhereInput[]
  OR?: Prisma.PicturesWhereInput[]
  NOT?: Prisma.PicturesWhereInput | Prisma.PicturesWhereInput[]
  id?: Prisma.StringFilter<"Pictures"> | string
  date?: Prisma.StringFilter<"Pictures"> | string
  explanation?: Prisma.StringFilter<"Pictures"> | string
  hdurl?: Prisma.StringNullableFilter<"Pictures"> | string | null
  media_type?: Prisma.StringFilter<"Pictures"> | string
  service_version?: Prisma.StringFilter<"Pictures"> | string
  title?: Prisma.StringFilter<"Pictures"> | string
  url?: Prisma.StringNullableFilter<"Pictures"> | string | null
  copyright?: Prisma.StringNullableFilter<"Pictures"> | string | null
}

export type PicturesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  hdurl?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  service_version?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
  copyright?: Prisma.SortOrder
}

export type PicturesWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PicturesWhereInput | Prisma.PicturesWhereInput[]
  OR?: Prisma.PicturesWhereInput[]
  NOT?: Prisma.PicturesWhereInput | Prisma.PicturesWhereInput[]
  date?: Prisma.StringFilter<"Pictures"> | string
  explanation?: Prisma.StringFilter<"Pictures"> | string
  hdurl?: Prisma.StringNullableFilter<"Pictures"> | string | null
  media_type?: Prisma.StringFilter<"Pictures"> | string
  service_version?: Prisma.StringFilter<"Pictures"> | string
  title?: Prisma.StringFilter<"Pictures"> | string
  url?: Prisma.StringNullableFilter<"Pictures"> | string | null
  copyright?: Prisma.StringNullableFilter<"Pictures"> | string | null
}, "id">

export type PicturesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  hdurl?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  service_version?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
  copyright?: Prisma.SortOrder
  _count?: Prisma.PicturesCountOrderByAggregateInput
  _max?: Prisma.PicturesMaxOrderByAggregateInput
  _min?: Prisma.PicturesMinOrderByAggregateInput
}

export type PicturesScalarWhereWithAggregatesInput = {
  AND?: Prisma.PicturesScalarWhereWithAggregatesInput | Prisma.PicturesScalarWhereWithAggregatesInput[]
  OR?: Prisma.PicturesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PicturesScalarWhereWithAggregatesInput | Prisma.PicturesScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Pictures"> | string
  date?: Prisma.StringWithAggregatesFilter<"Pictures"> | string
  explanation?: Prisma.StringWithAggregatesFilter<"Pictures"> | string
  hdurl?: Prisma.StringNullableWithAggregatesFilter<"Pictures"> | string | null
  media_type?: Prisma.StringWithAggregatesFilter<"Pictures"> | string
  service_version?: Prisma.StringWithAggregatesFilter<"Pictures"> | string
  title?: Prisma.StringWithAggregatesFilter<"Pictures"> | string
  url?: Prisma.StringNullableWithAggregatesFilter<"Pictures"> | string | null
  copyright?: Prisma.StringNullableWithAggregatesFilter<"Pictures"> | string | null
}

export type PicturesCreateInput = {
  id?: string
  date: string
  explanation: string
  hdurl?: string | null
  media_type: string
  service_version: string
  title: string
  url?: string | null
  copyright?: string | null
}

export type PicturesUncheckedCreateInput = {
  id?: string
  date: string
  explanation: string
  hdurl?: string | null
  media_type: string
  service_version: string
  title: string
  url?: string | null
  copyright?: string | null
}

export type PicturesUpdateInput = {
  date?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  hdurl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  media_type?: Prisma.StringFieldUpdateOperationsInput | string
  service_version?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  copyright?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PicturesUncheckedUpdateInput = {
  date?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  hdurl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  media_type?: Prisma.StringFieldUpdateOperationsInput | string
  service_version?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  copyright?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PicturesCreateManyInput = {
  id?: string
  date: string
  explanation: string
  hdurl?: string | null
  media_type: string
  service_version: string
  title: string
  url?: string | null
  copyright?: string | null
}

export type PicturesUpdateManyMutationInput = {
  date?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  hdurl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  media_type?: Prisma.StringFieldUpdateOperationsInput | string
  service_version?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  copyright?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PicturesUncheckedUpdateManyInput = {
  date?: Prisma.StringFieldUpdateOperationsInput | string
  explanation?: Prisma.StringFieldUpdateOperationsInput | string
  hdurl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  media_type?: Prisma.StringFieldUpdateOperationsInput | string
  service_version?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  copyright?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PicturesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  hdurl?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  service_version?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
  copyright?: Prisma.SortOrder
}

export type PicturesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  hdurl?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  service_version?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
  copyright?: Prisma.SortOrder
}

export type PicturesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  date?: Prisma.SortOrder
  explanation?: Prisma.SortOrder
  hdurl?: Prisma.SortOrder
  media_type?: Prisma.SortOrder
  service_version?: Prisma.SortOrder
  title?: Prisma.SortOrder
  url?: Prisma.SortOrder
  copyright?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
  unset?: boolean
}



export type PicturesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  date?: boolean
  explanation?: boolean
  hdurl?: boolean
  media_type?: boolean
  service_version?: boolean
  title?: boolean
  url?: boolean
  copyright?: boolean
}, ExtArgs["result"]["pictures"]>



export type PicturesSelectScalar = {
  id?: boolean
  date?: boolean
  explanation?: boolean
  hdurl?: boolean
  media_type?: boolean
  service_version?: boolean
  title?: boolean
  url?: boolean
  copyright?: boolean
}

export type PicturesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "date" | "explanation" | "hdurl" | "media_type" | "service_version" | "title" | "url" | "copyright", ExtArgs["result"]["pictures"]>

export type $PicturesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Pictures"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    date: string
    explanation: string
    hdurl: string | null
    media_type: string
    service_version: string
    title: string
    url: string | null
    copyright: string | null
  }, ExtArgs["result"]["pictures"]>
  composites: {}
}

export type PicturesGetPayload<S extends boolean | null | undefined | PicturesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PicturesPayload, S>

export type PicturesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PicturesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PicturesCountAggregateInputType | true
  }

export interface PicturesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pictures'], meta: { name: 'Pictures' } }
  /**
   * Find zero or one Pictures that matches the filter.
   * @param {PicturesFindUniqueArgs} args - Arguments to find a Pictures
   * @example
   * // Get one Pictures
   * const pictures = await prisma.pictures.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PicturesFindUniqueArgs>(args: Prisma.SelectSubset<T, PicturesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PicturesClient<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Pictures that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PicturesFindUniqueOrThrowArgs} args - Arguments to find a Pictures
   * @example
   * // Get one Pictures
   * const pictures = await prisma.pictures.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PicturesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PicturesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PicturesClient<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Pictures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PicturesFindFirstArgs} args - Arguments to find a Pictures
   * @example
   * // Get one Pictures
   * const pictures = await prisma.pictures.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PicturesFindFirstArgs>(args?: Prisma.SelectSubset<T, PicturesFindFirstArgs<ExtArgs>>): Prisma.Prisma__PicturesClient<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Pictures that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PicturesFindFirstOrThrowArgs} args - Arguments to find a Pictures
   * @example
   * // Get one Pictures
   * const pictures = await prisma.pictures.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PicturesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PicturesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PicturesClient<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Pictures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PicturesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Pictures
   * const pictures = await prisma.pictures.findMany()
   * 
   * // Get first 10 Pictures
   * const pictures = await prisma.pictures.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const picturesWithIdOnly = await prisma.pictures.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PicturesFindManyArgs>(args?: Prisma.SelectSubset<T, PicturesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Pictures.
   * @param {PicturesCreateArgs} args - Arguments to create a Pictures.
   * @example
   * // Create one Pictures
   * const Pictures = await prisma.pictures.create({
   *   data: {
   *     // ... data to create a Pictures
   *   }
   * })
   * 
   */
  create<T extends PicturesCreateArgs>(args: Prisma.SelectSubset<T, PicturesCreateArgs<ExtArgs>>): Prisma.Prisma__PicturesClient<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Pictures.
   * @param {PicturesCreateManyArgs} args - Arguments to create many Pictures.
   * @example
   * // Create many Pictures
   * const pictures = await prisma.pictures.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PicturesCreateManyArgs>(args?: Prisma.SelectSubset<T, PicturesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Pictures.
   * @param {PicturesDeleteArgs} args - Arguments to delete one Pictures.
   * @example
   * // Delete one Pictures
   * const Pictures = await prisma.pictures.delete({
   *   where: {
   *     // ... filter to delete one Pictures
   *   }
   * })
   * 
   */
  delete<T extends PicturesDeleteArgs>(args: Prisma.SelectSubset<T, PicturesDeleteArgs<ExtArgs>>): Prisma.Prisma__PicturesClient<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Pictures.
   * @param {PicturesUpdateArgs} args - Arguments to update one Pictures.
   * @example
   * // Update one Pictures
   * const pictures = await prisma.pictures.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PicturesUpdateArgs>(args: Prisma.SelectSubset<T, PicturesUpdateArgs<ExtArgs>>): Prisma.Prisma__PicturesClient<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Pictures.
   * @param {PicturesDeleteManyArgs} args - Arguments to filter Pictures to delete.
   * @example
   * // Delete a few Pictures
   * const { count } = await prisma.pictures.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PicturesDeleteManyArgs>(args?: Prisma.SelectSubset<T, PicturesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Pictures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PicturesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Pictures
   * const pictures = await prisma.pictures.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PicturesUpdateManyArgs>(args: Prisma.SelectSubset<T, PicturesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Pictures.
   * @param {PicturesUpsertArgs} args - Arguments to update or create a Pictures.
   * @example
   * // Update or create a Pictures
   * const pictures = await prisma.pictures.upsert({
   *   create: {
   *     // ... data to create a Pictures
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Pictures we want to update
   *   }
   * })
   */
  upsert<T extends PicturesUpsertArgs>(args: Prisma.SelectSubset<T, PicturesUpsertArgs<ExtArgs>>): Prisma.Prisma__PicturesClient<runtime.Types.Result.GetResult<Prisma.$PicturesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Pictures that matches the filter.
   * @param {PicturesFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const pictures = await prisma.pictures.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.PicturesFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Pictures.
   * @param {PicturesAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const pictures = await prisma.pictures.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.PicturesAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Pictures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PicturesCountArgs} args - Arguments to filter Pictures to count.
   * @example
   * // Count the number of Pictures
   * const count = await prisma.pictures.count({
   *   where: {
   *     // ... the filter for the Pictures we want to count
   *   }
   * })
  **/
  count<T extends PicturesCountArgs>(
    args?: Prisma.Subset<T, PicturesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PicturesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Pictures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PicturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PicturesAggregateArgs>(args: Prisma.Subset<T, PicturesAggregateArgs>): Prisma.PrismaPromise<GetPicturesAggregateType<T>>

  /**
   * Group by Pictures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PicturesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PicturesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PicturesGroupByArgs['orderBy'] }
      : { orderBy?: PicturesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PicturesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPicturesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Pictures model
 */
readonly fields: PicturesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Pictures.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PicturesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Pictures model
 */
export interface PicturesFieldRefs {
  readonly id: Prisma.FieldRef<"Pictures", 'String'>
  readonly date: Prisma.FieldRef<"Pictures", 'String'>
  readonly explanation: Prisma.FieldRef<"Pictures", 'String'>
  readonly hdurl: Prisma.FieldRef<"Pictures", 'String'>
  readonly media_type: Prisma.FieldRef<"Pictures", 'String'>
  readonly service_version: Prisma.FieldRef<"Pictures", 'String'>
  readonly title: Prisma.FieldRef<"Pictures", 'String'>
  readonly url: Prisma.FieldRef<"Pictures", 'String'>
  readonly copyright: Prisma.FieldRef<"Pictures", 'String'>
}
    

// Custom InputTypes
/**
 * Pictures findUnique
 */
export type PicturesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * Filter, which Pictures to fetch.
   */
  where: Prisma.PicturesWhereUniqueInput
}

/**
 * Pictures findUniqueOrThrow
 */
export type PicturesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * Filter, which Pictures to fetch.
   */
  where: Prisma.PicturesWhereUniqueInput
}

/**
 * Pictures findFirst
 */
export type PicturesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * Filter, which Pictures to fetch.
   */
  where?: Prisma.PicturesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pictures to fetch.
   */
  orderBy?: Prisma.PicturesOrderByWithRelationInput | Prisma.PicturesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Pictures.
   */
  cursor?: Prisma.PicturesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pictures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pictures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Pictures.
   */
  distinct?: Prisma.PicturesScalarFieldEnum | Prisma.PicturesScalarFieldEnum[]
}

/**
 * Pictures findFirstOrThrow
 */
export type PicturesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * Filter, which Pictures to fetch.
   */
  where?: Prisma.PicturesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pictures to fetch.
   */
  orderBy?: Prisma.PicturesOrderByWithRelationInput | Prisma.PicturesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Pictures.
   */
  cursor?: Prisma.PicturesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pictures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pictures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Pictures.
   */
  distinct?: Prisma.PicturesScalarFieldEnum | Prisma.PicturesScalarFieldEnum[]
}

/**
 * Pictures findMany
 */
export type PicturesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * Filter, which Pictures to fetch.
   */
  where?: Prisma.PicturesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Pictures to fetch.
   */
  orderBy?: Prisma.PicturesOrderByWithRelationInput | Prisma.PicturesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Pictures.
   */
  cursor?: Prisma.PicturesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Pictures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Pictures.
   */
  skip?: number
  distinct?: Prisma.PicturesScalarFieldEnum | Prisma.PicturesScalarFieldEnum[]
}

/**
 * Pictures create
 */
export type PicturesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * The data needed to create a Pictures.
   */
  data: Prisma.XOR<Prisma.PicturesCreateInput, Prisma.PicturesUncheckedCreateInput>
}

/**
 * Pictures createMany
 */
export type PicturesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Pictures.
   */
  data: Prisma.PicturesCreateManyInput | Prisma.PicturesCreateManyInput[]
}

/**
 * Pictures update
 */
export type PicturesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * The data needed to update a Pictures.
   */
  data: Prisma.XOR<Prisma.PicturesUpdateInput, Prisma.PicturesUncheckedUpdateInput>
  /**
   * Choose, which Pictures to update.
   */
  where: Prisma.PicturesWhereUniqueInput
}

/**
 * Pictures updateMany
 */
export type PicturesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Pictures.
   */
  data: Prisma.XOR<Prisma.PicturesUpdateManyMutationInput, Prisma.PicturesUncheckedUpdateManyInput>
  /**
   * Filter which Pictures to update
   */
  where?: Prisma.PicturesWhereInput
  /**
   * Limit how many Pictures to update.
   */
  limit?: number
}

/**
 * Pictures upsert
 */
export type PicturesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * The filter to search for the Pictures to update in case it exists.
   */
  where: Prisma.PicturesWhereUniqueInput
  /**
   * In case the Pictures found by the `where` argument doesn't exist, create a new Pictures with this data.
   */
  create: Prisma.XOR<Prisma.PicturesCreateInput, Prisma.PicturesUncheckedCreateInput>
  /**
   * In case the Pictures was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PicturesUpdateInput, Prisma.PicturesUncheckedUpdateInput>
}

/**
 * Pictures delete
 */
export type PicturesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
  /**
   * Filter which Pictures to delete.
   */
  where: Prisma.PicturesWhereUniqueInput
}

/**
 * Pictures deleteMany
 */
export type PicturesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Pictures to delete
   */
  where?: Prisma.PicturesWhereInput
  /**
   * Limit how many Pictures to delete.
   */
  limit?: number
}

/**
 * Pictures findRaw
 */
export type PicturesFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Pictures aggregateRaw
 */
export type PicturesAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Pictures without action
 */
export type PicturesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Pictures
   */
  select?: Prisma.PicturesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Pictures
   */
  omit?: Prisma.PicturesOmit<ExtArgs> | null
}
